#!/bin/sh

# This script can be used to setup an Electric application using frontend migrations only.
# You start from a local SQLite DB that has the desired schema.
# The script will then initialize the backend DB (PG) and the frontend (SQLite).
# Note that the local SQLite DB you start from is not the one that actually runs in your Electric app.
#
# The script proceeds in 3 steps:
#  1) Introspects your local SQLite DB to generate a Prisma schema
#  2) Pushes the Prisma schema to Electric in order to migrate PG
#  3) Runs the regular migration script which will:
#      3.1) Fetch the migrations from Electric
#      3.2) Update the Prisma schema
#      3.3) Generate a new Electric client
#      3.4) Generate triggers for the SQLite DB
#      3.5) Store the migrations and the triggers such that they are applied
#           to your app's SQLite DB when the app is first started

# Usage example:
#  sh frontendMigrate.sh -p prisma/schema.prisma

# Arguments are based on: https://unix.stackexchange.com/questions/31414/how-can-i-pass-a-command-line-argument-into-a-shell-script

# TODO: we should remove the hardcoded ../db/dev.dv and use an environment variable instead
#       such that we can use sed to put back the environment variable

helpFunction()
{
   echo ""
   echo "Usage: $0 -p prismaSchema"
   echo -e "\t-p The path to the file containing the Prisma schema."
   exit 1 # Exit script after printing help
}

while getopts "p:" opt
do
   case "$opt" in
      p ) prisma="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

if [ -z "$prisma" ]
then
   echo "Path to Prisma schema is missing.";
   helpFunction
fi

# Create and populate a SQLite DB
# from which we want to initialize our Electric app
# NOTE: This is only used for this demo
#       For you own apps, do not run this
#       just make sure your local SQLite DB has the desired schemas
#       and link the Prisma schema to your local DB
cd ./db
sh createDB.sh
cd ..

# Introspect the SQLite DB to update the Prisma schema
npx prisma db pull --schema=$prisma

# Copy the Prisma schema
pgPrisma="../../local-stack/compose/postgres/data/schema.prisma"

# Copy the PG Prisma schema to the directory that will be mounted in the PG container
mkdir -p "../../local-stack/compose/postgres/data"
cp $prisma $pgPrisma

# Modify the copy to use PG DB
sed -i'' -e 's/provider = "sqlite"/provider = "postgresql"/' $pgPrisma
#sed -i'' -e "s/\"file:..\/db\/dev.db\"/env(\"DATABASE_URL\")/" $pgPrisma
# \"postgres:\/\/postgres:password@localhost:5432\/electric\"

# Remove this unwanted -e file generated by sed
rm "$pgPrisma-e"

# Run the local-stack
cd ../../local-stack
docker-compose up -d

# Wait 3 seconds for everything to start up
sleep 3

# Connect to postgres container and install nvm
docker exec local-stack-postgres_1-1 bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash"

# Source .bashrc in order for the newly installed nvm command to be found
#docker exec local-stack-postgres_1-1 bash -c "source ~/.nvm/nvm.sh"
#docker exec local-stack-postgres_1-1 bash -c 'export NVM_DIR="$HOME/.nvm" -s "$NVM_DIR/nvm.sh" && \. "$NVM_DIR/nvm.sh"'
#docker exec local-stack-postgres_1-1 bash -c "source ${HOME}/.bashrc"
#docker exec local-stack-postgres_1-1 bash -c  "source ~/.bashrc"

# Install nvm
#docker exec -d local-stack-postgres_1-1 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

# exit the container, and join it again in order for nvm command to be known
#docker exec -d local-stack-postgres_1-1 echo "exit" | bash
#exit
#docker exec -it local-stack-postgres_1-1 bash

# Install node in order to get npm, then install prisma
docker exec local-stack-postgres_1-1 bash -c "source ~/.bashrc && nvm install node"
#docker exec -d local-stack-postgres_1-1 echo "nvm install node" | bash
docker exec local-stack-postgres_1-1 bash -c "source ~/.bashrc && npm install -g prisma"

# Migrate PG DB on Electric
docker exec local-stack-postgres_1-1 bash -c "source ~/.bashrc && cd home/ && export DATABASE_URL=\"postgres://postgres:password@localhost:5432/electric\" && npx prisma db push --skip-generate --schema=\"data/schema.prisma\""

cd ../examples/web-wa-sqlite

# Run the regular migration script which will:
#  - fetch the migrations from Electric
#  - build those migrations and the corresponding triggers
#  - generate/upgrade the Electric client
sh migrate.sh -p $prisma
