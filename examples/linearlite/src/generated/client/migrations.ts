export default [
  {
    "statements": [
      "CREATE TABLE \"issue\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT NOT NULL,\n  \"description\" TEXT NOT NULL,\n  \"priority\" TEXT NOT NULL,\n  \"status\" TEXT NOT NULL,\n  \"modified\" TEXT NOT NULL,\n  \"created\" TEXT NOT NULL,\n  \"kanbanorder\" TEXT NOT NULL,\n  \"username\" TEXT NOT NULL,\n  CONSTRAINT \"issue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"user\" (\n  \"username\" TEXT NOT NULL,\n  \"avatar\" TEXT,\n  CONSTRAINT \"user_pkey\" PRIMARY KEY (\"username\")\n) WITHOUT ROWID;\n",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.issue', 1);\n    ",
      "\n    /* Triggers for table issue */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_issue_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_issue_primarykey\n      BEFORE UPDATE ON main.issue\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.id != new.id THEN\n\t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_issue_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_issue_into_oplog\n       AFTER INSERT ON main.issue\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issue')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'issue', 'INSERT', json_object('id', new.id), json_object('created', new.created, 'description', new.description, 'id', new.id, 'kanbanorder', new.kanbanorder, 'modified', new.modified, 'priority', new.priority, 'status', new.status, 'title', new.title, 'username', new.username), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_issue_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_issue_into_oplog\n       AFTER UPDATE ON main.issue\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issue')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'issue', 'UPDATE', json_object('id', new.id), json_object('created', new.created, 'description', new.description, 'id', new.id, 'kanbanorder', new.kanbanorder, 'modified', new.modified, 'priority', new.priority, 'status', new.status, 'title', new.title, 'username', new.username), json_object('created', old.created, 'description', old.description, 'id', old.id, 'kanbanorder', old.kanbanorder, 'modified', old.modified, 'priority', old.priority, 'status', old.status, 'title', old.title, 'username', old.username), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_issue_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_issue_into_oplog\n       AFTER DELETE ON main.issue\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issue')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'issue', 'DELETE', json_object('id', old.id), NULL, json_object('created', old.created, 'description', old.description, 'id', old.id, 'kanbanorder', old.kanbanorder, 'modified', old.modified, 'priority', old.priority, 'status', old.status, 'title', old.title, 'username', old.username), NULL);\n    END;\n    ",
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.user', 1);\n    ",
      "\n    /* Triggers for table user */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_user_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_user_primarykey\n      BEFORE UPDATE ON main.user\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.username != new.username THEN\n\t\tRAISE (ABORT, 'cannot change the value of column username as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_user_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_user_into_oplog\n       AFTER INSERT ON main.user\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'user', 'INSERT', json_object('username', new.username), json_object('avatar', new.avatar, 'username', new.username), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_user_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_user_into_oplog\n       AFTER UPDATE ON main.user\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'user', 'UPDATE', json_object('username', new.username), json_object('avatar', new.avatar, 'username', new.username), json_object('avatar', old.avatar, 'username', old.username), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_user_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_user_into_oplog\n       AFTER DELETE ON main.user\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'user', 'DELETE', json_object('username', old.username), NULL, json_object('avatar', old.avatar, 'username', old.username), NULL);\n    END;\n    "
    ],
    "version": "20230905090129_947"
  }
]